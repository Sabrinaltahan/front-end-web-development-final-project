{"mappings":"ACCA,IAAI,EAAe,SAAS,cAAc,CAAC,cACvC,EAAY,SAAS,cAAc,CAAC,cACpC,EAAS,SAAS,cAAc,CAAC,UAGrC,eAAe,EAAkB,CAAS,EACxC,IAAM,EAAM,CAAC,0BAA0B,EAAE,EAAU,QAAQ,EAAE,IAAI,CAAC,CAElE,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,GACvB,EAAO,MAAM,EAAS,IAAI,GAEhC,GAAI,AAAkB,SAAlB,EAAK,QAAQ,CACf,OAAO,CAEP,OAAM,AAAI,MAAM,EAAK,KAAK,CAE9B,CAAE,MAAO,EAAO,CACd,MAAM,AAAI,MAAM,+BAClB,CACF,CAGA,eAAe,EAAkB,CAAM,EACrC,IAAM,EAAY,CAAC,mCAAmC,EAAE,EAAO,iBAAiB,EAAE,aAAa,CAAC,CAEhG,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,GACvB,EAAO,MAAM,EAAS,IAAI,GAEhC,GAAI,EAAK,OAAO,EAAI,EAAK,OAAO,CAAC,MAAM,CAAG,EACxC,OAAO,EAAK,OAAO,CAEnB,OAAO,IAEX,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,CAAC,0BAA2B,GAClC,IACT,CACF,CA+DA,eAAe,IACb,IAAM,EAAY,EAAa,KAAK,CAAC,IAAI,GAEzC,GAAI,AAAqB,IAArB,EAAU,MAAM,CAAQ,CAC1B,EAAO,SAAS,CAAG,iDACnB,MACF,CAEA,GAAI,CACF,IAAM,EAAY,MAAM,EAAkB,GAG1C,GAvEF,EAAO,SAAS,CAAG,CAAC;;iBAEL,EAAE,AAmEK,EAnEK,MAAM,CAAC;;gBAEpB,EAAE,AAiEM,EAjEI,KAAK,CAAC;;;oBAGd,EAAE,AA8DE,EA9DQ,UAAU,CAAC;;;sBAGrB,EAAE,AA2DA,EA3DU,KAAK,CAAC;sBAClB,EAAE,AA0DA,EA1DU,IAAI,CAAC;sBACjB,EAAE,AAyDA,EAzDU,OAAO,CAAC;;;qBAGrB,EAAE,AAsDC,EAtDS,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,eAAe;;;;;OAK/D,EAAE,AAiDe,EAjDL,IAAI,CAAC;;OAEjB,EAAE,AA+Ce,EA/CL,MAAM,CAAC;EACxB,CAAC,CAgDK,EAAU,MAAM,CAAE,CACpB,IAAM,EAAU,MAAM,EAAkB,EAAU,MAAM,GACxD,AA9CN,SAA6B,CAAO,EAClC,IAAM,EAAmB,SAAS,cAAc,CAAC,WAC7C,EAAc,EAEd,CAAA,GAAW,EAAQ,MAAM,CAAG,GAC9B,GAAe,oBACf,EAAQ,OAAO,CAAC,AAAC,IAEf,IAAM,EAAU,EAAO,OAAO,CAAC,SAAS,CAAC,EAAG,KAAO,MACnD,GAAe,CAAC;;;sBAGA,EAAE,EAAO,cAAc,CAAC,WAAW,CAAG,gDAAkD,EAAO,cAAc,CAAC,WAAW,CAAG,uGAAuG;;;uBAGlO,EAAE,EAAO,MAAM,CAAC;eACxB,EAAE,EAAQ;qBACJ,EAAE,EAAO,GAAG,CAAC;;cAEpB,CAAC,AACX,IAEA,GAAe,+CAGjB,EAAiB,SAAS,CAAG,CAC/B,EAoB0B,EACtB,CACF,CAAE,MAAO,EAAO,CACd,EAAO,SAAS,CAAG,CAAC,gBAAgB,EAAE,EAAM,OAAO,CAAC,KAAK,CAAC,AAC5D,CACF,CAGA,EAAU,gBAAgB,CAAC,QAAS,GACpC,OAAO,gBAAgB,CAAC,OAAQ","sources":["<anon>","src/script.js"],"sourcesContent":["//Initial References\nlet movieNameRef = document.getElementById(\"movie-name\");\nlet searchBtn = document.getElementById(\"search-btn\");\nlet result = document.getElementById(\"result\");\n// Function to fetch movie details from OMDb API\nasync function fetchMovieDetails(movieName) {\n    const url = `http://www.omdbapi.com/?t=${movieName}&apikey=${key}`;\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        if (data.Response === \"True\") return data;\n        else throw new Error(data.Error);\n    } catch (error) {\n        throw new Error(\"Error fetching movie details\");\n    }\n}\n// Function to fetch movie reviews from TMDB API\nasync function fetchMovieReviews(imdbID) {\n    const reviewUrl = `https://api.themoviedb.org/3/movie/${imdbID}/reviews?api_key=${reviewAPIKey}`;\n    try {\n        const response = await fetch(reviewUrl);\n        const data = await response.json();\n        if (data.results && data.results.length > 0) return data.results;\n        else return null;\n    } catch (error) {\n        console.error(\"Error fetching reviews:\", error);\n        return null;\n    }\n}\n// Function to display movie details on the UI\nfunction displayMovieDetails(movieData) {\n    result.innerHTML = `\r\n    <div class=\"info\">\r\n        <img src=${movieData.Poster} class=\"poster\">\r\n        <div>\r\n            <h2>${movieData.Title}</h2>\r\n            <div class=\"rating\">\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSfwosjDcbBSJnAb04zxsSTObl7orkQMRFzdw&usqp=CAU\">\r\n                <h4>${movieData.imdbRating}</h4>\r\n            </div>\r\n            <div class=\"details\">\r\n                <span>${movieData.Rated}</span>\r\n                <span>${movieData.Year}</span>\r\n                <span>${movieData.Runtime}</span>\r\n            </div>\r\n            <div class=\"genre\">\r\n                <div>${movieData.Genre.split(\",\").join(\"</div><div>\")}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <h3>Plot:</h3>\r\n    <p>${movieData.Plot}</p>\r\n    <h3>Cast:</h3>\r\n    <p>${movieData.Actors}</p>\r\n  `;\n}\n// Function to display movie reviews on the UI\nfunction displayMovieReviews(reviews) {\n    const reviewsContainer = document.getElementById(\"reviews\");\n    let reviewsHTML = \"\";\n    if (reviews && reviews.length > 0) {\n        reviewsHTML += \"<h3>Reviews:</h3>\";\n        reviews.forEach((review)=>{\n            // Summarize the content to first 500 characters\n            const summary = review.content.substring(0, 500) + \"...\";\n            reviewsHTML += `\r\n        <div class=\"review\">\r\n          <div class=\"avatar\">\r\n            <img src=\"${review.author_details.avatar_path ? \"https://image.tmdb.org/t/p/w45_and_h45_bestv2\" + review.author_details.avatar_path : \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT93xdF256EGJkJ32k4rKLx5JnO7-T1_lqT_Rm0egLC_w&s\"}\" alt=\"Avatar\">\r\n          </div>\r\n          <div class=\"review-info\">\r\n            <p><strong>${review.author}</strong></p>\r\n            <p>${summary}</p>\r\n            <a href=\"${review.url}\" target=\"_blank\" class=\"read-more-btn\">Read More</a>\r\n          </div>\r\n        </div>`;\n        });\n    } else reviewsHTML += \"<h3>No reviews available for this movie</h3>\";\n    reviewsContainer.innerHTML = reviewsHTML;\n}\n// Function to handle search button click event\nasync function handleSearch() {\n    const movieName = movieNameRef.value.trim();\n    if (movieName.length === 0) {\n        result.innerHTML = `<h3 class=\"msg\">Please Enter A Movie Name</h3>`;\n        return;\n    }\n    try {\n        const movieData = await fetchMovieDetails(movieName);\n        displayMovieDetails(movieData);\n        if (movieData.imdbID) {\n            const reviews = await fetchMovieReviews(movieData.imdbID);\n            displayMovieReviews(reviews);\n        }\n    } catch (error) {\n        result.innerHTML = `<h3 class='msg'>${error.message}</h3>`;\n    }\n}\n// Add event listeners\nsearchBtn.addEventListener(\"click\", handleSearch);\nwindow.addEventListener(\"load\", handleSearch);\n\n//# sourceMappingURL=index.5d49961f.js.map\n","//Initial References\r\nlet movieNameRef = document.getElementById(\"movie-name\");\r\nlet searchBtn = document.getElementById(\"search-btn\");\r\nlet result = document.getElementById(\"result\");\r\n\r\n// Function to fetch movie details from OMDb API\r\nasync function fetchMovieDetails(movieName) {\r\n  const url = `http://www.omdbapi.com/?t=${movieName}&apikey=${key}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (data.Response === \"True\") {\r\n      return data;\r\n    } else {\r\n      throw new Error(data.Error);\r\n    }\r\n  } catch (error) {\r\n    throw new Error(\"Error fetching movie details\");\r\n  }\r\n}\r\n\r\n// Function to fetch movie reviews from TMDB API\r\nasync function fetchMovieReviews(imdbID) {\r\n  const reviewUrl = `https://api.themoviedb.org/3/movie/${imdbID}/reviews?api_key=${reviewAPIKey}`;\r\n\r\n  try {\r\n    const response = await fetch(reviewUrl);\r\n    const data = await response.json();\r\n\r\n    if (data.results && data.results.length > 0) {\r\n      return data.results;\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching reviews:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Function to display movie details on the UI\r\nfunction displayMovieDetails(movieData) {\r\n  result.innerHTML = `\r\n    <div class=\"info\">\r\n        <img src=${movieData.Poster} class=\"poster\">\r\n        <div>\r\n            <h2>${movieData.Title}</h2>\r\n            <div class=\"rating\">\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSfwosjDcbBSJnAb04zxsSTObl7orkQMRFzdw&usqp=CAU\">\r\n                <h4>${movieData.imdbRating}</h4>\r\n            </div>\r\n            <div class=\"details\">\r\n                <span>${movieData.Rated}</span>\r\n                <span>${movieData.Year}</span>\r\n                <span>${movieData.Runtime}</span>\r\n            </div>\r\n            <div class=\"genre\">\r\n                <div>${movieData.Genre.split(\",\").join(\"</div><div>\")}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <h3>Plot:</h3>\r\n    <p>${movieData.Plot}</p>\r\n    <h3>Cast:</h3>\r\n    <p>${movieData.Actors}</p>\r\n  `;\r\n}\r\n\r\n// Function to display movie reviews on the UI\r\nfunction displayMovieReviews(reviews) {\r\n  const reviewsContainer = document.getElementById(\"reviews\");\r\n  let reviewsHTML = \"\";\r\n\r\n  if (reviews && reviews.length > 0) {\r\n    reviewsHTML += \"<h3>Reviews:</h3>\";\r\n    reviews.forEach((review) => {\r\n      // Summarize the content to first 500 characters\r\n      const summary = review.content.substring(0, 500) + \"...\";\r\n      reviewsHTML += `\r\n        <div class=\"review\">\r\n          <div class=\"avatar\">\r\n            <img src=\"${review.author_details.avatar_path ? 'https://image.tmdb.org/t/p/w45_and_h45_bestv2' + review.author_details.avatar_path : 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT93xdF256EGJkJ32k4rKLx5JnO7-T1_lqT_Rm0egLC_w&s'}\" alt=\"Avatar\">\r\n          </div>\r\n          <div class=\"review-info\">\r\n            <p><strong>${review.author}</strong></p>\r\n            <p>${summary}</p>\r\n            <a href=\"${review.url}\" target=\"_blank\" class=\"read-more-btn\">Read More</a>\r\n          </div>\r\n        </div>`;\r\n    });\r\n  } else {\r\n    reviewsHTML += \"<h3>No reviews available for this movie</h3>\";\r\n  }\r\n\r\n  reviewsContainer.innerHTML = reviewsHTML;\r\n}\r\n\r\n\r\n\r\n\r\n// Function to handle search button click event\r\nasync function handleSearch() {\r\n  const movieName = movieNameRef.value.trim();\r\n\r\n  if (movieName.length === 0) {\r\n    result.innerHTML = `<h3 class=\"msg\">Please Enter A Movie Name</h3>`;\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const movieData = await fetchMovieDetails(movieName);\r\n    displayMovieDetails(movieData);\r\n    \r\n    if (movieData.imdbID) {\r\n      const reviews = await fetchMovieReviews(movieData.imdbID);\r\n      displayMovieReviews(reviews);\r\n    }\r\n  } catch (error) {\r\n    result.innerHTML = `<h3 class='msg'>${error.message}</h3>`;\r\n  }\r\n}\r\n\r\n// Add event listeners\r\nsearchBtn.addEventListener(\"click\", handleSearch);\r\nwindow.addEventListener(\"load\", handleSearch);\r\n"],"names":["movieNameRef","document","getElementById","searchBtn","result","fetchMovieDetails","movieName","url","key","response","fetch","data","json","Response","Error","error","fetchMovieReviews","imdbID","reviewUrl","reviewAPIKey","results","length","console","handleSearch","value","trim","innerHTML","movieData","Poster","Title","imdbRating","Rated","Year","Runtime","Genre","split","join","Plot","Actors","reviews","displayMovieReviews","reviewsContainer","reviewsHTML","forEach","review","summary","content","substring","author_details","avatar_path","author","message","addEventListener","window"],"version":3,"file":"index.5d49961f.js.map"}